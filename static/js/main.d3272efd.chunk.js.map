{"version":3,"sources":["components/Counter/Display/Display.module.css","components/CounterSettings/InputsBoard/InputBoard.module.css","components/Counter/Counter.module.css","components/CounterSettings/CounterSettings.module.css","components/Counter/ControlPanel/ControlPanel.module.css","components/Button/button.module.css","components/CounterSettings/ControlPanel/ControlPanel.module.css","redux/counterReducer.js","redux/store.js","components/Counter/Display/Display.jsx","components/Button/Button.jsx","components/Counter/ControlPanel/ControlPanel.jsx","components/Counter/Counter.jsx","components/CounterSettings/InputsBoard/InputsBoard.jsx","components/CounterSettings/ControlPanel/ControlPanel.jsx","components/CounterSettings/CounterSettings.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","state","count","maxValue","maxValueCache","startValue","startValueCache","invalidValue","instruction","counterReducer","action","type","reducers","combineReducers","store","createStore","window","Display","setCounterStyle","props","styles","_counterInfo","_counterInvalid","_counterInstruction","_counterLimit","_counterCorrect","className","this","_display","_displayError","React","Component","Button","_btn","onClick","clickFn","disabled","disabledStatus","btnName","ControlPanel","_controlPanel","incCount","resetCount","Counter","_container","_box","InputsBoard","onCacheMaxValueChanged","e","currentTarget","value","setCacheMaxValue","setInputStyle","onCacheStartValueChanged","setCacheStartValue","_numberInputs","_numberInvalid","_numberInputsBox","_inputsSignHead","id","onChange","onSetInputsValue","setInputsValue","saveState","toggleDisable","CounterSettings","App","stateAsString","JSON","stringify","localStorage","setItem","restoreState","getItem","parse","setState","AppContainer","connect","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d3272efd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"_display\":\"Display__display__519Tr\",\"_displayError\":\"Display__displayError__2qLNp\",\"_counterInfo\":\"Display__counterInfo__fNp9q\",\"_counterCorrect\":\"Display__counterCorrect__2DdrI\",\"_counterLimit\":\"Display__counterLimit__1IxZB\",\"_counterInvalid\":\"Display__counterInvalid__c7_-t\",\"_counterInstruction\":\"Display__counterInstruction__tVWle\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_box\":\"InputBoard__box__3TI7j\",\"_numberInputsBox\":\"InputBoard__numberInputsBox__1cAFd\",\"_inputsSignHead\":\"InputBoard__inputsSignHead__1hOiY\",\"_numberInputs\":\"InputBoard__numberInputs__2FV4D\",\"_numberInvalid\":\"InputBoard__numberInvalid__3QGj8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_container\":\"Counter__container__1oO9f\",\"_box\":\"Counter__box__1dBLk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_wrapper\":\"CounterSettings__wrapper__1F0Qk\",\"_container\":\"CounterSettings__container__2qM7R\",\"_box\":\"CounterSettings__box__1VyBw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_controlPanel\":\"ControlPanel__controlPanel__3Lnsi\",\"_incBtn\":\"ControlPanel__incBtn__ffKSq\",\"_resetBtn\":\"ControlPanel__resetBtn__3isuQ\",\"_unactive\":\"ControlPanel__unactive__knwOM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_btn\":\"button__btn__1ChBS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_controlPanel\":\"ControlPanel__controlPanel__2PHN0\",\"_incBtn\":\"ControlPanel__incBtn__D1pn3\",\"_resetBtn\":\"ControlPanel__resetBtn__WcpIi\",\"_unactive\":\"ControlPanel__unactive__3UczL\"};","export const INCREMENT = 'INCREMENT';\r\n\r\nlet initialState = {\r\n    state: {\r\n        count: 0,\r\n        maxValue: 1,\r\n        maxValueCache: 1,\r\n        startValue: 0,\r\n        startValueCache: 0,\r\n        invalidValue: 'incorrect value!',\r\n        instruction: `enter values and press 'set'`,\r\n\r\n    }\r\n};\r\n\r\nconst counterReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INCREMENT:\r\n            return {...state, count: state.count + 1};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const useIncrementAC = () => {\r\n    return {\r\n        type: INCREMENT\r\n    }\r\n};\r\n\r\nexport default counterReducer;","import {combineReducers, createStore} from 'redux';\r\nimport counterReducer from './counterReducer';\r\n\r\nlet reducers = combineReducers(\r\n    counterReducer\r\n);\r\n\r\nlet store = createStore(reducers);\r\n\r\nwindow.store = store;\r\n\r\nexport default store;\r\n\r\n","import React from 'react';\r\nimport styles from './Display.module.css';\r\n\r\nclass Display extends React.Component {\r\n\r\n    setCounterStyle = () => {\r\n        if (this.props.state.startValueCache < 0 || this.props.state.startValueCache >= this.props.state.maxValueCache) {\r\n            return `${styles._counterInfo} ${styles._counterInvalid}`;\r\n        } else if (!(this.props.state.startValueCache === this.props.state.startValue && this.props.state.maxValueCache === this.props.state.maxValue)) {\r\n            return `${styles._counterInfo} ${styles._counterInstruction}`;\r\n        } else {\r\n            return (this.props.state.maxValue === this.props.state.count)\r\n                ? `${styles._counterInfo} ${styles._counterLimit}`\r\n                : `${styles._counterInfo} ${styles._counterCorrect}`;\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return(\r\n            <div className={this.props.state.startValueCache < 0 || this.props.state.startValueCache >= this.props.state.maxValueCache ? `${styles._display} ${styles._displayError}` : `${styles._display}`}>\r\n                <div className={this.setCounterStyle()}>\r\n                    {\r\n                    (this.props.state.startValueCache < 0 || this.props.state.startValueCache >= this.props.state.maxValueCache)\r\n                    ? this.props.state.invalidValue\r\n                    : (this.props.state.maxValueCache === this.props.state.maxValue && this.props.state.startValueCache === this.props.state.startValue\r\n                        ? this.props.state.count\r\n                        : this.props.state.instruction)\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Display;","import React from 'react';\r\nimport styles from './button.module.css';\r\n\r\nconst Button = (props) => (<button type=\"button\" className={styles._btn} onClick={props.clickFn} disabled={props.disabledStatus}>{props.btnName}</button>)\r\n\r\nexport default Button;","import React from 'react';\r\nimport styles from './ControlPanel.module.css';\r\nimport Button from \"../../Button/Button\";\r\n\r\nclass ControlPanel extends React.Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className={styles._controlPanel}>\r\n                <Button btnName={'inc.'} clickFn={this.props.incCount} disabledStatus={this.props.state.count === this.props.state.maxValue\r\n                || !(this.props.state.startValueCache === this.props.state.startValue && this.props.state.maxValueCache === this.props.state.maxValue)}/>\r\n                <Button btnName={'reset'} clickFn={this.props.resetCount} disabledStatus={this.props.state.count === this.props.state.startValue}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ControlPanel;","import React from 'react';\r\nimport styles from './Counter.module.css';\r\nimport Display from \"./Display/Display\";\r\nimport ControlPanel from \"./ControlPanel/ControlPanel\";\r\n\r\nclass Counter extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Counter\">\r\n                <div className={styles._container}>\r\n                    <div className={styles._box}>\r\n                        <Display state={this.props.state}/>\r\n                        <ControlPanel incCount={this.props.incCount}\r\n                                      resetCount={this.props.resetCount}\r\n                                      state={this.props.state}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Counter;","import React from 'react';\r\nimport styles from './InputBoard.module.css';\r\n\r\nclass InputsBoard extends React.Component {\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    onCacheMaxValueChanged = (e) => {\r\n        let maxValue = e.currentTarget.value;\r\n        this.props.setCacheMaxValue(maxValue);\r\n        this.setInputStyle();\r\n    }\r\n\r\n    onCacheStartValueChanged = (e) => {\r\n        let startValue = e.currentTarget.value;\r\n        this.props.setCacheStartValue(startValue);\r\n    }\r\n\r\n    setInputStyle = () => {\r\n        if (\r\n            this.props.state.startValueCache < 0\r\n            || this.props.state.maxValueCache <= this.props.state.startValueCache\r\n            ) {\r\n            return `${styles._numberInputs} ${styles._numberInvalid}`;\r\n        } else {\r\n            return `${styles._numberInputs}`;\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"InputsBoard block\">\r\n                <div className={styles._box}>\r\n                    <div className={styles._numberInputsBox}>\r\n                        <h4 className={styles._inputsSignHead}>Max Value:</h4>\r\n                        <input type=\"number\" className={this.setInputStyle()} id=\"maxValue\" onChange={this.onCacheMaxValueChanged} value={this.props.state.maxValueCache} />\r\n                    </div>\r\n                    <div className={styles._numberInputsBox}>\r\n                        <h4 className={styles._inputsSignHead}>Start Value:</h4>\r\n                        <input type=\"number\" className={this.setInputStyle()} id=\"startValue\" onChange={this.onCacheStartValueChanged} value={this.props.state.startValueCache}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InputsBoard;","import React from 'react';\r\nimport styles from './ControlPanel.module.css';\r\nimport Button from \"../../Button/Button\";\r\n\r\nclass ControlPanel extends React.Component {\r\n\r\n    onSetInputsValue = () => {\r\n        let maxValue = this.props.state.maxValueCache;\r\n        let startValue =  this.props.state.startValueCache;\r\n        this.props.setInputsValue(maxValue, startValue);\r\n        this.props.saveState();\r\n    }\r\n\r\n    toggleDisable = () => {\r\n        return (\r\n            (this.props.state.startValueCache === this.props.state.startValue && this.props.state.maxValueCache === this.props.state.maxValue)\r\n            || this.props.state.startValueCache < 0\r\n            || this.props.state.maxValueCache <= this.props.state.startValueCache\r\n        );\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className={styles._controlPanel}>\r\n                <Button btnName={'set'} clickFn={this.onSetInputsValue} disabledStatus={this.toggleDisable()}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ControlPanel;","import React from 'react';\r\nimport styles from './CounterSettings.module.css';\r\nimport InputsBoard from \"./InputsBoard/InputsBoard\";\r\nimport ControlPanel from \"./ControlPanel/ControlPanel\";\r\n\r\n\r\nclass CounterSettings extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"CounterSettings\">\r\n                <div className={styles._container}>\r\n                    <div className={styles._box}>\r\n                        <InputsBoard state={this.props.state} setCacheMaxValue={this.props.setCacheMaxValue} setCacheStartValue={this.props.setCacheStartValue}/>\r\n                        <ControlPanel state={this.props.state} setInputsValue={this.props.setInputsValue} saveState={this.props.saveState}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CounterSettings;","import React from 'react';\nimport './App.css';\nimport Counter from './components/Counter/Counter';\nimport CounterSettings from './components/CounterSettings/CounterSettings';\nimport {connect} from 'react-redux';\n\nclass App extends React.Component {\n    state =  {\n        count: 0,\n        maxValue: 1,\n        maxValueCache: 1,\n        startValue: 0,\n        startValueCache: 0,\n        invalidValue: 'incorrect value!',\n        instruction: `enter values and press 'set'`,\n\n    }\n\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem(\"counterState\", stateAsString)\n    }\n\n    restoreState = () => {\n\n        let stateAsString = localStorage.getItem(\"counterState\");\n        if (stateAsString) {\n            this.state = JSON.parse(stateAsString);\n        };\n        this.setState({...this.state});\n    }\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    setCacheMaxValue = (maxValue) => {\n        this.setState({maxValueCache: +maxValue});\n    }\n\n    setCacheStartValue = (startValue) => {\n        this.setState({startValueCache: +startValue});\n    }\n\n    incCount = () => {\n       if (this.state.count < this.state.maxValue) {\n            this.setState({count:  this.state.count + 1});\n       }\n    }\n\n    resetCount = () => {\n        this.setState({count: this.state.startValue});\n    }\n\n    setInputsValue = (maxValue, startValue) => {\n        this.setState({\n            count: +startValue,\n            maxValue: +maxValue,\n            startValue: +startValue\n        });\n    }\n\n    render() {\n        return(\n            <div className=\"App flex\">\n                <CounterSettings state={this.state} setCacheMaxValue={this.setCacheMaxValue} setCacheStartValue={this.setCacheStartValue} setInputsValue={this.setInputsValue} saveState={this.saveState} />\n                <Counter state={this.state} incCount={this.incCount} resetCount={this.resetCount}/>\n            </div>\n        );\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        state\n    }\n}\n\nexport const AppContainer = connect(mapStateToProps, {}) (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport store from './redux/store';\nimport './index.css';\nimport {AppContainer} from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\n\n    ReactDOM.render(\n        <Provider store={store}>\n        <AppContainer />\n        </Provider>,\n        document.getElementById('root')\n    );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}