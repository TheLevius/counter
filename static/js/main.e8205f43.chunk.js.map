{"version":3,"sources":["components/Main/Display/Display.module.css","components/Main/Main.module.css","components/Main/ControlPanel/ControlPanel.module.css","components/Main/Display/Display.jsx","components/Main/ControlPanel/ControlPanel.jsx","components/Main/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Display","className","styles","_display","this","props","count","_counterInfo","_counterLimit","React","Component","ControlPanel","_controlPanel","type","_incBtn","onClick","incCount","disabled","_resetBtn","resetCount","Main","_wrapper","_container","_box","state","App","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,SAAW,0BAA0B,aAAe,8BAA8B,cAAgB,iC,gBCApHD,EAAOC,QAAU,CAAC,SAAW,uBAAuB,WAAa,yBAAyB,KAAO,qB,gBCAjGD,EAAOC,QAAU,CAAC,cAAgB,oCAAoC,QAAU,8BAA8B,UAAY,gCAAgC,UAAY,kC,+NCevJC,E,uKAVP,OACI,yBAAKC,UAAWC,IAAOC,UACnB,yBAAKF,UAAgC,IAArBG,KAAKC,MAAMC,MAAX,UAA4BJ,IAAOK,aAAnC,YAAmDL,IAAOM,eAAkBN,IAAOK,cAC9FH,KAAKC,MAAMC,Y,GANVG,IAAMC,W,gBCabC,E,uKATP,OACI,yBAAKV,UAAWC,IAAOU,eACnB,4BAAQC,KAAK,SAASZ,UAAWC,IAAOY,QAASC,QAASX,KAAKC,MAAMW,SAAUC,SAA+B,IAArBb,KAAKC,MAAMC,OAApG,QACA,4BAAQO,KAAK,SAASZ,UAAWC,IAAOgB,UAAWH,QAASX,KAAKC,MAAMc,WAAYF,SAA+B,IAArBb,KAAKC,MAAMC,OAAxG,c,GAPWG,IAAMC,WCiBlBU,E,uKAbP,OACI,yBAAKnB,UAAWC,IAAOmB,UACnB,yBAAKpB,UAAWC,IAAOoB,YACnB,yBAAKrB,UAAWC,IAAOqB,MACnB,kBAAC,EAAD,CAASjB,MAAOF,KAAKC,MAAMmB,MAAMlB,QACjC,kBAAC,EAAD,CAAcU,SAAUZ,KAAKC,MAAMW,SAAWG,WAAYf,KAAKC,MAAMc,WAAYb,MAAOF,KAAKC,MAAMmB,MAAMlB,e,GAP9GG,IAAMC,WCyBVe,E,4MAzBXD,MAAS,CACLlB,MAAO,G,EAGXU,SAAW,WACJ,EAAKQ,MAAMlB,MAAQ,GAClB,EAAKoB,SAAS,CAACpB,MAAQ,EAAKkB,MAAMlB,MAAQ,K,EAIlDa,WAAa,WACT,EAAKO,SAAS,CAACpB,MAAO,K,uDAMtB,OACI,yBAAKL,UAAU,OACX,kBAAC,EAAD,CAAMuB,MAAOpB,KAAKoB,MAAOR,SAAUZ,KAAKY,SAAWG,WAAYf,KAAKe,kB,GApBlEV,IAAMC,WCQJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e8205f43.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"_display\":\"Display__display__2mypl\",\"_counterInfo\":\"Display__counterInfo__22kA_\",\"_counterLimit\":\"Display__counterLimit__1G9et\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_wrapper\":\"Main__wrapper__1OYkn\",\"_container\":\"Main__container__2dn1e\",\"_box\":\"Main__box__E5StX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"_controlPanel\":\"ControlPanel__controlPanel__14zVh\",\"_incBtn\":\"ControlPanel__incBtn__3NwUB\",\"_resetBtn\":\"ControlPanel__resetBtn__2xlL6\",\"_unactive\":\"ControlPanel__unactive__2g1gd\"};","import React from 'react';\r\nimport styles from './Display.module.css';\r\n\r\nclass Display extends React.Component {\r\n    render() {\r\n\r\n        return(\r\n            <div className={styles._display}>\r\n                <div className={this.props.count === 5 ? `${styles._counterInfo} ${styles._counterLimit}` : styles._counterInfo}>\r\n                    {this.props.count}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Display;","import React from 'react';\r\nimport styles from './ControlPanel.module.css';\r\n\r\nclass ControlPanel extends React.Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className={styles._controlPanel}>\r\n                <button type='button' className={styles._incBtn} onClick={this.props.incCount} disabled={this.props.count === 5}>inc.</button>\r\n                <button type=\"button\" className={styles._resetBtn} onClick={this.props.resetCount} disabled={this.props.count === 0}>reset</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ControlPanel;","import React from 'react';\r\nimport styles from './Main.module.css';\r\nimport Display from \"./Display/Display\";\r\nimport ControlPanel from \"./ControlPanel/ControlPanel\";\r\n\r\nclass Main extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className={styles._wrapper}>\r\n                <div className={styles._container}>\r\n                    <div className={styles._box}>\r\n                        <Display count={this.props.state.count}/>\r\n                        <ControlPanel incCount={this.props.incCount}  resetCount={this.props.resetCount} count={this.props.state.count}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from \"./components/Main/Main\";\n\nclass App extends React.Component {\n    state =  {\n        count: 0\n    }\n\n    incCount = () => {\n       if (this.state.count < 5) {\n            this.setState({count:  this.state.count + 1});\n       }\n    }\n\n    resetCount = () => {\n        this.setState({count: 0});\n    }\n\n\n\n    render() {\n        return(\n            <div className=\"App\">\n                <Main state={this.state} incCount={this.incCount}  resetCount={this.resetCount}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}